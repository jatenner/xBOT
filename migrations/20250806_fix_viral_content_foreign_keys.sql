-- ðŸ”§ FIX VIRAL CONTENT FOREIGN KEY CONSTRAINTS
-- ==============================================
-- Add missing viral content templates that are being referenced

-- First ensure the viral_content_templates table exists
CREATE TABLE IF NOT EXISTS viral_content_templates (
    id VARCHAR(100) PRIMARY KEY,
    template_name VARCHAR(255) NOT NULL,
    template_content TEXT,
    success_rate NUMERIC(12,4) DEFAULT 0,
    usage_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Insert the missing template that's being referenced
INSERT INTO viral_content_templates (id, template_name, template_content, success_rate)
VALUES 
    ('viral_generated', 'AI Generated Viral Content', 'Dynamic viral content generated by AI', 0.75),
    ('hook_generated', 'AI Generated Hook Content', 'Dynamic hook content generated by AI', 0.65),
    ('thread_generated', 'AI Generated Thread Content', 'Dynamic thread content generated by AI', 0.70),
    ('question_generated', 'AI Generated Question Content', 'Dynamic question content generated by AI', 0.60),
    ('story_generated', 'AI Generated Story Content', 'Dynamic story content generated by AI', 0.68)
ON CONFLICT (id) DO NOTHING;

-- Also ensure the viral_content_usage table exists with proper structure
CREATE TABLE IF NOT EXISTS viral_content_usage (
    id SERIAL PRIMARY KEY,
    template_id VARCHAR(100) REFERENCES viral_content_templates(id),
    tweet_id VARCHAR(255),
    usage_timestamp TIMESTAMP DEFAULT NOW(),
    performance_score NUMERIC(12,4) DEFAULT 0,
    engagement_rate NUMERIC(12,4) DEFAULT 0
);

-- Create index for performance
CREATE INDEX IF NOT EXISTS idx_viral_content_usage_template_id ON viral_content_usage(template_id);
CREATE INDEX IF NOT EXISTS idx_viral_content_usage_tweet_id ON viral_content_usage(tweet_id);

-- Show what was fixed
SELECT 'Viral content foreign key constraints fixed - added missing templates' as status;