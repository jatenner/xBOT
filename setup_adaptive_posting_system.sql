-- ===================================================================
-- ðŸŽ¯ ADAPTIVE POSTING SYSTEM SETUP
-- ===================================================================
-- Sets up dynamic daily posting limits and enhanced engagement tracking
-- Allows AI to control posting frequency based on performance (5-100 range)
-- ===================================================================

-- 1. Create bot_settings table for dynamic daily limits
CREATE TABLE IF NOT EXISTS bot_settings (
    id                BOOLEAN PRIMARY KEY DEFAULT TRUE,       -- Single row table
    daily_post_limit  INTEGER        NOT NULL DEFAULT 15,    -- AI-controlled limit
    updated_at        TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at        TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insert default row
INSERT INTO bot_settings (id) VALUES (TRUE)
ON CONFLICT (id) DO NOTHING;

-- 2. Add engagement tracking columns to tweets table
ALTER TABLE tweets 
  ADD COLUMN IF NOT EXISTS impressions      INTEGER DEFAULT 0,
  ADD COLUMN IF NOT EXISTS profile_visits   INTEGER DEFAULT 0;

-- 3. Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_tweets_impressions ON tweets(impressions);
CREATE INDEX IF NOT EXISTS idx_tweets_profile_visits ON tweets(profile_visits);
CREATE INDEX IF NOT EXISTS idx_bot_settings_updated_at ON bot_settings(updated_at);

-- 4. Add comments for documentation
COMMENT ON TABLE bot_settings IS 'AI-controlled bot configuration settings';
COMMENT ON COLUMN bot_settings.daily_post_limit IS 'Dynamic daily post limit set by AI optimization (5-100 range)';
COMMENT ON COLUMN tweets.impressions IS 'Number of times the tweet was viewed';
COMMENT ON COLUMN tweets.profile_visits IS 'Number of profile visits generated by the tweet';

-- 5. Create view for adaptive posting analytics
CREATE OR REPLACE VIEW adaptive_posting_analytics AS
SELECT 
    DATE(created_at) as date,
    COUNT(*) as posts_count,
    AVG(likes) as avg_likes,
    AVG(retweets) as avg_retweets,
    AVG(replies) as avg_replies,
    AVG(impressions) as avg_impressions,
    AVG(profile_visits) as avg_profile_visits,
    SUM(impressions) as total_impressions,
    SUM(profile_visits) as total_profile_visits,
    CASE 
        WHEN SUM(impressions) > 0 THEN (SUM(likes) + SUM(retweets) + SUM(replies)) * 100.0 / SUM(impressions)
        ELSE 0 
    END as engagement_rate_percent
FROM tweets 
WHERE created_at >= NOW() - INTERVAL '30 days'
GROUP BY DATE(created_at)
ORDER BY date DESC;

-- 6. Create function to get current adaptive status
CREATE OR REPLACE FUNCTION get_adaptive_posting_status()
RETURNS TABLE (
    current_limit INTEGER,
    posts_today INTEGER,
    remaining_posts INTEGER,
    last_updated TIMESTAMP WITH TIME ZONE,
    seven_day_avg_engagement DECIMAL
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        bs.daily_post_limit,
        COALESCE(today_posts.count, 0)::INTEGER,
        (bs.daily_post_limit - COALESCE(today_posts.count, 0))::INTEGER,
        bs.updated_at,
        COALESCE(recent_engagement.avg_rate, 0)::DECIMAL
    FROM bot_settings bs
    CROSS JOIN LATERAL (
        SELECT COUNT(*)::INTEGER as count
        FROM tweets 
        WHERE DATE(created_at) = CURRENT_DATE
    ) today_posts
    CROSS JOIN LATERAL (
        SELECT AVG(
            CASE 
                WHEN impressions > 0 THEN (likes + retweets + replies) * 100.0 / impressions
                ELSE 0 
            END
        ) as avg_rate
        FROM tweets 
        WHERE created_at >= NOW() - INTERVAL '7 days'
    ) recent_engagement
    WHERE bs.id = TRUE;
END;
$$ LANGUAGE plpgsql;

-- Success message
SELECT 
    'ðŸŽ¯ Adaptive posting system setup complete!' as status,
    'AI can now control daily posting frequency (5-100 range)' as feature,
    'Enhanced engagement tracking enabled' as tracking,
    NOW() as completed_at;