{
  "name": "snap2health-xbot",
  "version": "1.0.1",
  "description": "Autonomous X (Twitter) bot for Snap2Health with AI-powered content generation",
  "main": "dist/main.js",
  "scripts": {
    "prestart": "node scripts/migrate.js",
    "start": "node dist/main-bulletproof.js",
    "start:bulletproof": "node dist/main-bulletproof.js",
    "postinstall": "echo 'Installation complete'",
    "build": "tsc -p .",
    "build-clean": "rm -rf dist && npm run build",
    "rail:logs": "railway logs --service xBOT | tail -n 400",
    "rail:scan": "railway logs --service xBOT | tail -n 400 | grep -E 'PLAYWRIGHT_FACTORY_READY|POST_SKIPPED_(PLAYWRIGHT|LIVE_OFF)|PGRST116|headless_shell|Target page|ENOENT' || true",
    "seed:session": "tsx scripts/seed-session.ts",
    "auth:session": "node create_authenticated_session.js",
    "verify:session": "node verify_session.js",
    "test:session": "node scripts/session_check.js",
    "verify": "npm run build && npm run test:unit",
    "test:unit": "echo 'Unit tests placeholder - all core functionality tested via integration'",
    "test:post": "tsx scripts/test-post.ts",
    "dry": "tsx scripts/dry-run.ts",
    "fix:content": "tsx scripts/fix-content-generation.ts",
    "verify:data": "tsx scripts/verify-data-storage.ts",
    "seed:x-session": "ts-node -T tools/seedSession.ts",
    "lint:sample": "ts-node -T tools/tryLinter.ts",
    "print:b64-session": "ts-node tools/session-cli.ts print-b64",
    "test:x-session": "npx playwright open --load-storage=data/twitter_session.json https://x.com/home",
    "clear:x-session": "rm -f data/twitter_session.json && echo 'Session cleared'",
    "print:x-cookies": "node -e \"console.log(JSON.parse(require('fs').readFileSync('data/twitter_session.json','utf8')).cookies.map(c=>c.name))\"",
    "b64:x-session": "base64 < data/twitter_session.json | pbcopy && echo 'Session base64 copied to clipboard'",
    "probe:pw": "node scripts/probe_playwright.js",
    "probe:remote": "curl -sSf $PROD_URL/playwright",
    "post:dry": "curl -sSf -X POST $PROD_URL/ai-post -H 'content-type: application/json' -d '{\"topic\":\"smoke\",\"dryRun\":true}'",
    "postbuild": "mkdir -p dist/dashboard && cp src/dashboard/*.html dist/dashboard/ 2>/dev/null || true && mkdir -p dist/prompts && cp -r src/prompts/* dist/prompts/ && echo 'Build completed successfully'",
    "migrate:prod": "node scripts/bulletproof_migrate.js",
    "migrate:stg": "bash -lc 'set -euo pipefail; set -a; source ./.env.staging-cli.sh; set +a; npx supabase db push --project-ref \"$STAGING_PROJECT_REF\"'",
    "start:prod": "npm run migrate:prod && node dist/main.js",
    "start:stg": "npm run migrate:stg && node dist/main.js",
    "migrate": "node scripts/db_push.js",
    "cost:audit": "tsx scripts/cost-audit.ts",
    "cost:report": "tsx scripts/cost-audit.ts > reports/cost-report-$(date +%Y%m%d).txt",
    "cost:migrate": "npx supabase db push --file scripts/migration-openai-cost-tracking.sql",
    "dev": "npm run setup-check && nodemon src/index.js",
    "test": "jest",
    "lint": "eslint .",
    "dashboard": "node src/dashboard/dashboardLauncher.js",
    "simulation": "npm run build && node dist/dashboard/simulationLauncher.js",
    "enhanced-simulation": "npm run build && node dist/dashboard/enhancedSimulationLauncher.js",
    "db:audit": "npm run build && ts-node scripts/tableHeat.ts",
    "remote-monitor": "node start_remote_bot_monitor.js",
    "ghost-killer": "node start_ghost_killer_local.js",
    "setup-apis": "node setup_free_apis.js",
    "test-apis": "node test_apis.js",
    "setup-db": "node init_database.js && node -e \"require('./supabase/advanced_optimization_schema.sql')\"",
    "setup-check": "node -e \"console.log('🔍 Checking setup...'); if (!require('fs').existsSync('.env')) { console.log('⚠️ No .env file found. Run: npm run setup-apis'); process.exit(1); }\"",
    "build-minimal": "node --max-old-space-size=1024 ./node_modules/.bin/tsc --incremental --skipLibCheck",
    "emergency": "node --max-old-space-size=400 emergency_main.js",
    "safe-start": "EMERGENCY_MODE=true npm start",
    "start-original": "npm run migrate && node dist/main.js",
    "logs": "node bulletproof_railway_monitor.js",
    "dry:thread": "tsx tools/dryRunThread.ts",
    "migrate:meta": "tsx scripts/run-meta-migration.ts",
    "verify:schema": "tsx scripts/verify-schema.ts",
    "dryrun:post": "tsx scripts/dryrun-post.ts",
    "migrate:apply": "tsx scripts/apply-migration.ts",
    "test:cadence": "jest tests/cadence.test.ts",
    "test:reply": "jest tests/reply.test.ts",
    "test:quality": "jest tests/quality.test.ts",
    "test:clients": "jest tests/clients.test.ts",
    "test:lock": "jest tests/lock.test.ts",
    "test:browser": "jest tests/browser.test.ts",
    "test:content": "jest tests/contentOperator.test.ts",
    "post:thread": "tsx tools/forceThread.ts",
    "test:growth-engine": "tsx tools/testGrowthEngine.ts",
    "test:production": "tsx tools/testProductionIntegration.ts",
    "test:format": "jest tests/formatSanitizer.test.ts",
    "test:linter": "jest tests/tweetLinter.test.ts",
    "test:poster": "jest tests/autonomousTwitterPoster.test.ts",
    "test:thread-integrity": "jest tests/threadIntegrity.test.ts",
    "logs-old": "node perfect_railway_logs.js",
    "init-session": "npm run build && node dist/utils/initTwitterSession.js",
    "test-session": "npm run build && node dist/utils/initTwitterSession.js test",
    "test-scraper": "npm run build && node dist/test/testScraper.js",
    "test-scraper-quick": "npm run build && node dist/test/testScraper.js search",
    "analytics": "npm run build && node dist/dashboard/analyticsLauncher.js",
    "test-quote": "npm run build && node -e \"const {quoteAgent} = require('./dist/agents/quoteAgent.js'); quoteAgent.executeQuoteTweet().then(r => console.log(r))\"",
    "test-follower": "npm run build && node dist/jobs/updateFollowerCount.js",
    "candidates:refresh": "npm run build && node scripts/candidates-refresh.js",
    "learning:test": "tsx scripts/test-learning-system.ts",
    "health:check": "npm run build && node -e \"const {HealthMonitor} = require('./dist/ops/health'); new HealthMonitor().printHealthStatus()\"",
    "schedule:test": "npm run build && node -e \"const {SchedulingLoop} = require('./dist/schedule/loop'); new SchedulingLoop().runCycle().then(r => console.log('Scheduling test complete:', r))\"",
    "test-browser-post": "npm run build && node dist/utils/browserTweetPoster.js",
    "test-deployment": "npm run build && node dist/deploymentTest.js",
    "test-semantic": "npm run build && node dist/test/testSemanticUniqueness.js",
    "test-browser-posting": "npm run build && node dist/test/testBrowserPosting.js",
    "cache-user-id": "npm run build && node dist/scripts/cacheTwitterUserId.js",
    "render-build": "./render-build.sh",
    "playwright-setup": "npx playwright install chromium --force",
    "start:enhanced": "node start-enhanced-system.js",
    "start:enhanced:ts": "ts-node start-enhanced-system.ts",
    "status:enhanced": "node -e \"console.log('🧠 Enhanced Learning System Status:'); console.log('✅ All components deployed and ready');\"",
    "test:enhanced": "node test_bandit_system.js",
    "monitor": "node monitor_enhanced_system.js",
    "fix-quality": "node fix_content_quality_issues.js",
    "railway-start": "node dist/main.js",
    "post-now": "SKIP_PLAYWRIGHT=true npm run build && node immediate_post_now.js",
    "force-post": "node force_post_railway.js",
    "railway-status": "node railway_status.js",
    "test:threads": "node run_thread_tests.js",
    "test:integration": "npm run build && node -e \"import('./dist/testing/testing/integrationTests.js').then(m => m.IntegrationTests.runCriticalTests().then(r => console.log(m.IntegrationTests.generateReport(r))))\"",
    "validate": "node validate_before_deploy.js",
    "safe-deploy": "npm run validate && git push",
    "force-post-help": "node force_post_web.js",
    "emergency-growth": "node scripts/emergency-activate-growth.js",
    "start-emergency": "npm run build && npm run emergency",
    "start:emergency": "node dist/emergencyMain.js",
    "start:full": "node dist/main.js",
    "e2e:dry": "tsx scripts/dryRun.ts",
    "content:generate": "tsx scripts/content-operator.ts",
    "content:quick": "tsx scripts/content-operator.ts --quick",
    "content:analyze": "tsx scripts/content-operator.ts --analyze",
    "content:health": "tsx scripts/content-operator.ts --brand health",
    "content:productivity": "tsx scripts/content-operator.ts --brand productivity",
    "content:mindfulness": "tsx scripts/content-operator.ts --brand mindfulness",
    "post": "node dist/main-bulletproof.js",
    "replies": "node dist/main-bulletproof.js",
    "learn": "tsx scripts/enhanced-content-operator.ts learn",
    "content": "tsx scripts/enhanced-content-operator.ts",
    "health": "tsx scripts/health-check.ts",
    "learning:quick": "tsx scripts/test-learning-system.ts quick",
    "learning:dry-run": "tsx scripts/test-learning-system.ts dry-run",
    "learning:generate": "tsx -e \"import('./src/core/learningSystemOrchestrator.js').then(m => new m.default().generateVettedContent().then(c => console.log(JSON.stringify(c, null, 2))))\"",
    "learning:batch": "tsx -e \"import('./src/core/learningSystemOrchestrator.js').then(m => new m.default().generateContentBatch(3))\"",
    "learning:cycle": "tsx -e \"import('./src/core/learningSystemOrchestrator.js').then(m => new m.default().runCompleteLearningCycle())\"",
    "learning:status": "tsx -e \"import('./src/core/learningSystemOrchestrator.js').then(m => new m.default().getSystemStatus().then(s => console.log(JSON.stringify(s, null, 2))))\"",
    "migrate:learning": "npx supabase db push",
    "autonomous": "node dist/autonomous/autonomous/autonomousMain.js",
    "autonomous:dry": "DRY_RUN=1 node dist/autonomous/autonomous/autonomousMain.js",
    "autonomous:status": "node scripts/autonomous-status.js",
    "autonomous:test": "npm run build && npm run autonomous:dry",
    "migrate:autonomous": "supabase migration push --include-all"
  },
  "keywords": [
    "twitter",
    "bot",
    "ai",
    "healthcare",
    "automation",
    "social-media"
  ],
  "author": "Snap2Health",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0"
  },
  "dependencies": {
    "@solana/wallet-standard-features": "^1.3.0",
    "@supabase/supabase-js": "^2.45.1",
    "@types/luxon": "^3.7.1",
    "ajv": "^8.12.0",
    "axios": "^1.6.0",
    "cheerio": "^1.0.0-rc.12",
    "cors": "^2.8.5",
    "cron": "^3.1.7",
    "dotenv": "^16.3.1",
    "express": "^4.21.2",
    "ioredis": "^5.3.2",
    "luxon": "^3.7.2",
    "node-cron": "^3.0.3",
    "openai": "^4.56.0",
    "pg": "^8.11.3",
    "playwright": "1.47.2",
    "redis": "^4.7.1",
    "socket.io": "^4.7.4",
    "twitter-api-v2": "^1.17.2",
    "typescript": "^5.5.4",
    "winston": "^3.14.2",
    "ws": "^8.18.3",
    "xml2js": "^0.6.2",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@types/cheerio": "^0.22.35",
    "@types/cors": "^2.8.17",
    "@types/cron": "^2.4.0",
    "@types/express": "^4.17.21",
    "@types/jest": "^30.0.0",
    "@types/node": "^22.5.0",
    "@types/node-cron": "^3.0.11",
    "@types/pg": "^8.10.9",
    "@types/ws": "^8.5.12",
    "@types/xml2js": "^0.4.14",
    "jest": "^29.7.0",
    "supabase": "^1.200.3",
    "ts-jest": "^29.4.0",
    "ts-node": "^10.9.2",
    "tsx": "^4.20.4"
  }
}
