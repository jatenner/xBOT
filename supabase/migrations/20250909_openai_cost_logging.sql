-- =====================================================
-- OPENAI COST LOGGING SCHEMA
-- Forward migration: Create table, indexes, RPC, grants
-- =====================================================

BEGIN;

-- Create openai_usage_log table
CREATE TABLE IF NOT EXISTS public.openai_usage_log (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamptz NOT NULL DEFAULT now(),
    model text NOT NULL,
    cost_tier text NULL,
    intent text NULL,
    prompt_tokens integer NOT NULL,
    completion_tokens integer NOT NULL,
    total_tokens integer NOT NULL,
    cost_usd numeric(12,6) NOT NULL,
    request_id text NULL,
    finish_reason text NULL,
    raw jsonb NULL
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS openai_usage_log_created_at_idx ON public.openai_usage_log (created_at DESC);
CREATE INDEX IF NOT EXISTS openai_usage_log_model_idx ON public.openai_usage_log (model);
CREATE INDEX IF NOT EXISTS openai_usage_log_intent_idx ON public.openai_usage_log (intent);

-- RLS is OFF for this table (server inserts via service key)
ALTER TABLE public.openai_usage_log DISABLE ROW LEVEL SECURITY;

-- Create RPC function with exact signature the app expects
CREATE OR REPLACE FUNCTION public.log_openai_usage(
    p_completion_tokens integer,
    p_cost_tier text,
    p_cost_usd numeric,
    p_finish_reason text,
    p_intent text,
    p_model text,
    p_prompt_tokens integer,
    p_raw jsonb,
    p_request_id text,
    p_total_tokens integer
)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    INSERT INTO public.openai_usage_log (
        model, cost_tier, intent, prompt_tokens, completion_tokens, 
        total_tokens, cost_usd, request_id, finish_reason, raw
    ) VALUES (
        p_model, p_cost_tier, p_intent, p_prompt_tokens, p_completion_tokens,
        p_total_tokens, p_cost_usd, p_request_id, p_finish_reason, p_raw
    );
END;
$$;

-- Grant execute permissions
GRANT EXECUTE ON FUNCTION public.log_openai_usage(integer, text, numeric, text, text, text, integer, jsonb, text, integer) 
TO anon, authenticated, service_role;

-- Grant table permissions  
GRANT SELECT, INSERT ON public.openai_usage_log TO service_role;
GRANT SELECT ON public.openai_usage_log TO authenticated; -- For dashboards

-- Add attempt_status column to posts table for learning filter
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'posts' AND column_name = 'attempt_status'
    ) THEN
        ALTER TABLE public.posts ADD COLUMN attempt_status text DEFAULT 'PUBLISHED';
        CREATE INDEX IF NOT EXISTS posts_attempt_status_idx ON public.posts (attempt_status);
    END IF;
END $$;

COMMIT;

-- =====================================================
-- DOWN MIGRATION (Optional - for rollback)
-- =====================================================
-- DROP FUNCTION IF EXISTS public.log_openai_usage(integer, text, numeric, text, text, text, integer, jsonb, text, integer);
-- DROP TABLE IF EXISTS public.openai_usage_log;
-- ALTER TABLE public.posts DROP COLUMN IF EXISTS attempt_status;