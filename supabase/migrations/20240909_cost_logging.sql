-- =====================================================
-- OPENAI COST LOGGING & BUDGET ENFORCEMENT SCHEMA
-- Idempotent migration - safe to re-run
-- =====================================================

BEGIN;

-- 1) Create usage log table
CREATE TABLE IF NOT EXISTS public.openai_usage_log (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamptz NOT NULL DEFAULT now(),
  model text NOT NULL,
  cost_tier text,
  intent text,
  prompt_tokens integer NOT NULL,
  completion_tokens integer NOT NULL,
  total_tokens integer NOT NULL,
  cost_usd numeric(12,6) NOT NULL,
  request_id text,
  finish_reason text,
  raw jsonb NOT NULL
);

-- 2) Performance indexes
CREATE INDEX IF NOT EXISTS idx_openai_usage_log_created_at ON public.openai_usage_log (created_at);
CREATE INDEX IF NOT EXISTS idx_openai_usage_log_model ON public.openai_usage_log (model);
CREATE INDEX IF NOT EXISTS idx_openai_usage_log_cost ON public.openai_usage_log (cost_usd);

-- 3) Secure RPC for logging (matches expected signature from logs)
CREATE OR REPLACE FUNCTION public.log_openai_usage(
  p_completion_tokens integer,
  p_cost_tier text,
  p_cost_usd numeric,
  p_finish_reason text,
  p_intent text,
  p_model text,
  p_prompt_tokens integer,
  p_raw jsonb,
  p_request_id text,
  p_total_tokens integer
) RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.openai_usage_log (
    model, cost_tier, intent,
    prompt_tokens, completion_tokens, total_tokens,
    cost_usd, request_id, finish_reason, raw
  ) VALUES (
    p_model, p_cost_tier, p_intent,
    p_prompt_tokens, p_completion_tokens, p_total_tokens,
    p_cost_usd, p_request_id, p_finish_reason, p_raw
  );
END;
$$;

-- 4) Row Level Security
ALTER TABLE public.openai_usage_log ENABLE ROW LEVEL SECURITY;

-- Create policy only if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies
    WHERE schemaname = 'public' AND tablename = 'openai_usage_log' AND policyname = 'service_role_all'
  ) THEN
    CREATE POLICY "service_role_all"
      ON public.openai_usage_log
      FOR ALL
      TO service_role
      USING (true)
      WITH CHECK (true);
  END IF;
END$$;

-- 5) Daily aggregate view for monitoring
CREATE OR REPLACE VIEW public.openai_usage_daily AS
SELECT
  (created_at AT TIME ZONE 'UTC')::date AS usage_date_utc,
  SUM(cost_usd) AS total_cost_usd,
  COUNT(*) AS calls,
  jsonb_object_agg(model, model_stats) AS model_breakdown
FROM (
  SELECT
    created_at,
    model,
    cost_usd,
    jsonb_build_object(
      'calls', COUNT(*),
      'cost', SUM(cost_usd),
      'tokens', SUM(total_tokens)
    ) AS model_stats
  FROM public.openai_usage_log
  GROUP BY created_at, model, cost_usd
) t
GROUP BY 1
ORDER BY 1 DESC;

-- 6) Grant permissions
GRANT SELECT ON public.openai_usage_daily TO service_role;
GRANT EXECUTE ON FUNCTION public.log_openai_usage TO service_role;

COMMIT;
