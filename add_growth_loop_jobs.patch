--- src/agents/scheduler.ts.orig
+++ src/agents/scheduler.ts
@@ -57,6 +57,9 @@
   private weeklyReportJob: cron.ScheduledTask | null = null;
   private tweetAuditorJob: cron.ScheduledTask | null = null;
   private orchestratorJob: cron.ScheduledTask | null = null;
+  private engagementFeedbackJob: cron.ScheduledTask | null = null;
+  private strategyLearnerJob: cron.ScheduledTask | null = null;
+  private followGrowthJob: cron.ScheduledTask | null = null;

   constructor() {
     dotenv.config();
@@ -352,6 +355,36 @@
       }
     });

+    // Growth Loop Jobs - Only if enabled
+    if (process.env.GROWTH_LOOP_ENABLED === 'true') {
+      console.log('üöÄ GROWTH LOOP: Scheduling F/1K optimization agents...');
+      
+      // Engagement Feedback - Every hour
+      this.engagementFeedbackJob = cron.schedule('0 * * * *', async () => {
+        try {
+          await this.engagementFeedbackAgent.collectMetrics();
+        } catch (error) {
+          console.error('‚ùå Engagement feedback failed:', error);
+        }
+      }, { scheduled: false, timezone: "UTC" });
+      
+      // Strategy Learning - Daily at 2:30 AM UTC
+      this.strategyLearnerJob = cron.schedule('30 2 * * *', async () => {
+        try {
+          await this.strategyLearner.analyzeAndLearn();
+        } catch (error) {
+          console.error('‚ùå Strategy learning failed:', error);
+        }
+      }, { scheduled: false, timezone: "UTC" });
+      
+      // Follow Growth - Every 4 hours
+      this.followGrowthJob = cron.schedule('15 */4 * * *', async () => {
+        try {
+          await this.followGrowthAgent.executeGrowthStrategy();
+        } catch (error) {
+          console.error('‚ùå Follow growth failed:', error);
+        }
+      }, { scheduled: false, timezone: "UTC" });
+    }
+
     // Store job references for cleanup
     this.jobs.set('strategist', this.strategistJob);
     this.jobs.set('learning', this.learningJob);
@@ -363,6 +396,12 @@
     this.jobs.set('orchestrator', this.orchestratorJob);
     this.jobs.set('nightlyOptimizer', this.nightlyOptimizerJob);

+    if (process.env.GROWTH_LOOP_ENABLED === 'true') {
+      this.jobs.set('engagementFeedback', this.engagementFeedbackJob);
+      this.jobs.set('strategyLearner', this.strategyLearnerJob);
+      this.jobs.set('followGrowth', this.followGrowthJob);
+    }
+
     // Start all jobs
     this.strategistJob.start();
     if (!disableLearningAgents) {
@@ -376,6 +415,13 @@
     this.orchestratorJob.start();
     this.nightlyOptimizerJob.start();

+    if (process.env.GROWTH_LOOP_ENABLED === 'true') {
+      this.engagementFeedbackJob.start();
+      this.strategyLearnerJob.start();
+      this.followGrowthJob.start();
+      console.log('üöÄ Growth loop agents started successfully!');
+    }
+
     // Start engagement tracker
     try {
       await this.engagementTracker.startTracking();
