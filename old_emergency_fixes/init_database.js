const { createClient } = require("@supabase/supabase-js"); require("dotenv").config(); const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY); async function initializeDatabase() { console.log("🔧 Initializing database configuration..."); try { const { error: flagsError } = await supabase.from("control_flags").upsert([{ id: "DISABLE_BOT", value: false }, { id: "MAINTENANCE_MODE", value: false }, { id: "DEBUG_MODE", value: false }], { onConflict: "id" }); if (flagsError) { console.error("Error initializing control_flags:", flagsError); } else { console.log("✅ Control flags initialized"); } const { error: promptError } = await supabase.from("prompt_features").upsert([{ id: 1, variant_of_the_day: "default" }], { onConflict: "id" }); if (promptError) { console.error("Error initializing prompt_features:", promptError); } else { console.log("✅ Prompt features initialized"); } const today = new Date().toISOString().split("T")[0]; const { error: usageError } = await supabase.from("api_usage").upsert([{ date: today, writes: 0, reads: 0 }], { onConflict: "date" }); if (usageError) { console.error("Error initializing api_usage:", usageError); } else { console.log("✅ API usage initialized"); } console.log("🎉 Database initialization complete!"); } catch (error) { console.error("❌ Database initialization failed:", error); } } initializeDatabase().then(() => process.exit(0));
