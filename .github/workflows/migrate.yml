name: Database Migration Pipeline

on:
  pull_request:
    paths:
      - 'supabase/migrations/**'
      - '.github/workflows/migrate.yml'
  push:
    branches:
      - main
    paths:
      - 'supabase/migrations/**'

env:
  POSTGRES_IMAGE: postgres:15

jobs:
  # Stage 1: Shadow Testing (runs on PRs)
  shadow-test:
    name: 🧪 Shadow Test Migration
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: shadow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Apply migrations in order
        run: |
          echo "🔄 Applying migrations to shadow database..."
          
          # Apply migrations in order
          for migration in supabase/migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Applying: $migration"
              PGPASSWORD=postgres psql -h localhost -U postgres -d shadow_test -f "$migration"
              if [ $? -ne 0 ]; then
                echo "❌ Migration failed: $migration"
                exit 1
              fi
            fi
          done
          
          echo "✅ All migrations applied successfully"

      - name: Run verification checks
        run: |
          echo "🔍 Running verification checks..."
          
          PGPASSWORD=postgres psql -h localhost -U postgres -d shadow_test -f supabase/migrations/verify.sql
          if [ $? -ne 0 ]; then
            echo "❌ Verification failed"
            exit 1
          fi
          
          echo "✅ Verification passed"

      - name: Run drift detection
        run: |
          echo "🔍 Running drift detection..."
          
          PGPASSWORD=postgres psql -h localhost -U postgres -d shadow_test -f supabase/migrations/drift_check.sql
          if [ $? -ne 0 ]; then
            echo "❌ Drift check failed"
            exit 1
          fi
          
          echo "✅ Drift check passed"

      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **Shadow test passed!** Migrations are safe for staging deployment.'
            })

  # Stage 2: Staging Deployment (auto on main push)
  staging-deploy:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Apply migrations to staging
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          STAGING_PROJECT_REF: ${{ secrets.STAGING_PROJECT_REF }}
        run: |
          echo "🔄 Applying migrations to staging..."
          
          # Apply migrations using Supabase CLI
          supabase db push --project-ref $STAGING_PROJECT_REF
          
          echo "✅ Staging migrations applied"

      - name: Run staging verification
        env:
          STAGING_DB_URL: ${{ secrets.STAGING_DB_URL }}
        run: |
          echo "🔍 Running staging verification..."
          
          psql "$STAGING_DB_URL" -f supabase/migrations/verify.sql > staging_verify.log
          psql "$STAGING_DB_URL" -f supabase/migrations/drift_check.sql > staging_drift.log
          
          echo "📊 Staging verification results:"
          cat staging_verify.log
          echo "📊 Staging drift check results:"
          cat staging_drift.log

      - name: Upload staging results
        uses: actions/upload-artifact@v4
        with:
          name: staging-migration-results
          path: |
            staging_verify.log
            staging_drift.log

  # Stage 3: Production Deployment (manual approval required)
  production-deploy:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: staging-deploy
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Apply migrations to production
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          PRODUCTION_PROJECT_REF: ${{ secrets.PRODUCTION_PROJECT_REF }}
        run: |
          echo "🔄 Applying migrations to production..."
          
          # Apply migrations using Supabase CLI
          supabase db push --project-ref $PRODUCTION_PROJECT_REF
          
          echo "✅ Production migrations applied"

      - name: Run production verification
        env:
          PRODUCTION_DB_URL: ${{ secrets.PRODUCTION_DB_URL }}
        run: |
          echo "🔍 Running production verification..."
          
          psql "$PRODUCTION_DB_URL" -f supabase/migrations/verify.sql > production_verify.log
          psql "$PRODUCTION_DB_URL" -f supabase/migrations/drift_check.sql > production_drift.log
          
          echo "📊 Production verification results:"
          cat production_verify.log
          echo "📊 Production drift check results:"
          cat production_drift.log

      - name: Upload production results
        uses: actions/upload-artifact@v4
        with:
          name: production-migration-results
          path: |
            production_verify.log
            production_drift.log

      - name: Notify success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: 'Production migration completed successfully',
              context: 'migration/production'
            })